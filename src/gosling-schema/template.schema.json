{
  "$ref": "#/definitions/TemplateTrackDef",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Aggregate": {
      "enum": [
        "max",
        "min",
        "mean",
        "bin",
        "count"
      ],
      "type": "string"
    },
    "Assembly": {
      "anyOf": [
        {
          "const": "hg38",
          "type": "string"
        },
        {
          "const": "hg19",
          "type": "string"
        },
        {
          "const": "hg18",
          "type": "string"
        },
        {
          "const": "hg17",
          "type": "string"
        },
        {
          "const": "hg16",
          "type": "string"
        },
        {
          "const": "mm10",
          "type": "string"
        },
        {
          "const": "mm9",
          "type": "string"
        },
        {
          "const": "unknown",
          "type": "string"
        },
        {
          "$ref": "#/definitions/ChromSizes"
        }
      ]
    },
    "AxisPosition": {
      "enum": [
        "none",
        "top",
        "bottom",
        "left",
        "right"
      ],
      "type": "string"
    },
    "ChannelWithBase": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "aggregate": {
              "$ref": "#/definitions/Aggregate",
              "description": "Specify how to aggregate data. __Default__: `undefined`"
            },
            "axis": {
              "$ref": "#/definitions/AxisPosition",
              "description": "Specify where should the axis be put"
            },
            "base": {
              "type": "string"
            },
            "domain": {
              "$ref": "#/definitions/GenomicDomain",
              "description": "Values of the data"
            },
            "field": {
              "description": "Name of the data field.",
              "type": "string"
            },
            "grid": {
              "description": "Whether to display grid. __Default__: `false`",
              "type": "boolean"
            },
            "legend": {
              "description": "Whether to display legend. __Default__: `false`",
              "type": "boolean"
            },
            "linkingId": {
              "description": "Users need to assign a unique linkingId for [linking views](/docs/user-interaction#linking-views) and [Brushing and Linking](/docs/user-interaction#brushing-and-linking)",
              "type": "string"
            },
            "range": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Values of the visual channel."
            },
            "type": {
              "const": "genomic",
              "description": "Specify the data type.",
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "aggregate": {
              "$ref": "#/definitions/Aggregate",
              "description": "Specify how to aggregate data. __Default__: `undefined`"
            },
            "axis": {
              "$ref": "#/definitions/AxisPosition",
              "description": "Specify where should the axis be put"
            },
            "base": {
              "type": "string"
            },
            "baseline": {
              "description": "Custom baseline of the y-axis. __Default__: `0`",
              "type": [
                "string",
                "number"
              ]
            },
            "domain": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueExtent"
                },
                {
                  "$ref": "#/definitions/GenomicDomain"
                }
              ],
              "description": "Values of the data"
            },
            "field": {
              "description": "Name of the data field.",
              "type": "string"
            },
            "flip": {
              "description": "Whether to flip the y-axis. This is done by inverting the `range` property. __Default__: `false`",
              "type": "boolean"
            },
            "grid": {
              "description": "Whether to display grid. __Default__: `false`",
              "type": "boolean"
            },
            "legend": {
              "description": "Whether to display legend. __Default__: `false`",
              "type": "boolean"
            },
            "linkingId": {
              "description": "Users need to assign a unique linkingId for [linking views](/docs/user-interaction#linking-views) and [Brushing and Linking](/docs/user-interaction#brushing-and-linking)",
              "type": "string"
            },
            "range": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Values of the visual channel."
            },
            "type": {
              "description": "Specify the data type.",
              "enum": [
                "quantitative",
                "nominal",
                "genomic"
              ],
              "type": "string"
            },
            "zeroBaseline": {
              "description": "Specify whether to use zero baseline. __Default__: `true`",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "string"
            },
            "clip": {
              "description": "Clip row when the actual y value exceeds the max value of the y scale. Used only for bar marks at the moment. __Default__: `true`",
              "type": "boolean"
            },
            "domain": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Values of the data"
            },
            "field": {
              "description": "Name of the data field",
              "type": "string"
            },
            "grid": {
              "description": "Whether to display grid. __Default__: `false`",
              "type": "boolean"
            },
            "legend": {
              "description": "Whether to display legend. __Default__: `false`",
              "type": "boolean"
            },
            "padding": {
              "description": "Determines the size of inner white spaces on the top and bottom of individiual rows. __Default__: `0`",
              "type": "number"
            },
            "range": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Determine the start and end position of rendering area of this track along vertical axis. __Default__: `[0, height]`"
            },
            "type": {
              "const": "nominal",
              "description": "Specify the data type",
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "string"
            },
            "domain": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Values of the data"
            },
            "field": {
              "description": "Name of the data field",
              "type": "string"
            },
            "legend": {
              "description": "Whether to display legend. __Default__: `false`",
              "type": "boolean"
            },
            "range": {
              "$ref": "#/definitions/Range",
              "description": "Determine the colors that should be bound to data value. Default properties are determined considering the field type."
            },
            "scale": {
              "enum": [
                "linear",
                "log"
              ],
              "type": "string"
            },
            "scaleOffset": {
              "description": "Whether to use offset of the domain proportionally. This is bound to brushes on the color legend. __Default__: `[0, 1]`",
              "items": {
                "type": "number"
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "title": {
              "description": "Title of the legend. __Default__: `undefined`",
              "type": "string"
            },
            "type": {
              "description": "Specify the data type",
              "enum": [
                "quantitative",
                "nominal"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "string"
            },
            "domain": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Values of the data"
            },
            "field": {
              "description": "Name of the data field",
              "type": "string"
            },
            "legend": {
              "description": "not supported: Whether to display legend. __Default__: `false`",
              "type": "boolean"
            },
            "range": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Ranges of visual channel values"
            },
            "type": {
              "description": "Specify the data type",
              "enum": [
                "quantitative",
                "nominal"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "string"
            },
            "domain": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Values of the data"
            },
            "field": {
              "description": "Name of the data field",
              "type": "string"
            },
            "legend": {
              "description": "Whether to display legend. __Default__: `false`",
              "type": "boolean"
            },
            "range": {
              "$ref": "#/definitions/Range",
              "description": "Ranges of visual channel values"
            },
            "scaleOffset": {
              "description": "Whether to use offset of the domain proportionally. This is bound to brushes on the color legend. __Default__: `[0, 1]`",
              "items": {
                "type": "number"
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "title": {
              "description": "Title of the legend. __Default__: `undefined`",
              "type": "string"
            },
            "type": {
              "description": "Specify the data type",
              "enum": [
                "quantitative",
                "nominal"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "string"
            },
            "domain": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Values of the data"
            },
            "field": {
              "description": "Name of the data field",
              "type": "string"
            },
            "range": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Ranges of visual channel values"
            },
            "type": {
              "description": "Specify the data type",
              "enum": [
                "quantitative",
                "nominal"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "string"
            },
            "domain": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Values of the data"
            },
            "field": {
              "description": "Name of the data field",
              "type": "string"
            },
            "range": {
              "$ref": "#/definitions/ValueExtent",
              "description": "Ranges of visual channel values"
            },
            "type": {
              "description": "Specify the data type",
              "enum": [
                "quantitative",
                "nominal"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "string"
            },
            "domain": {
              "description": "Values of the data",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "field": {
              "description": "Name of the data field",
              "type": "string"
            },
            "range": {
              "description": "Ranges of visual channel values",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": {
              "description": "Specify the data type",
              "enum": [
                "quantitative",
                "nominal"
              ],
              "type": "string"
            }
          },
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "base": {
              "type": "string"
            },
            "value": {
              "description": "Assign a constant value for a visual channel.",
              "type": [
                "number",
                "string"
              ]
            }
          },
          "required": [
            "value"
          ],
          "type": "object"
        }
      ]
    },
    "ChromSizes": {
      "description": "Custom chromosome sizes, e.g., [[\"foo\", 1000], [\"bar\", 300], [\"baz\", 240]]",
      "items": {
        "items": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ],
        "maxItems": 2,
        "minItems": 2,
        "type": "array"
      },
      "type": "array"
    },
    "CustomChannelDef": {
      "additionalProperties": false,
      "description": "Definition of custom channels used in a track template.",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "anyOf": [
            {
              "$ref": "#/definitions/FieldType"
            },
            {
              "const": "value",
              "type": "string"
            }
          ]
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "DataTransformWithBase": {
      "additionalProperties": false,
      "properties": {
        "base": {
          "$ref": "#/definitions/LogBase",
          "description": "If not specified, 10 is used."
        },
        "baseGenomicField": {
          "description": "Base genomic position when parsing relative position.",
          "type": "string"
        },
        "boundingBox": {
          "additionalProperties": false,
          "properties": {
            "endField": {
              "description": "The name of a quantitative field that represents the end position.",
              "type": "string"
            },
            "groupField": {
              "description": "The name of a nominal field to group rows by in prior to piling-up.",
              "type": "string"
            },
            "isPaddingBP": {
              "description": "Whether to consider `padding` as the bp length.",
              "type": "boolean"
            },
            "padding": {
              "description": "The padding around visual lements. Either px or bp",
              "type": "number"
            },
            "startField": {
              "description": "The name of a quantitative field that represents the start position.",
              "type": "string"
            }
          },
          "required": [
            "startField",
            "endField"
          ],
          "type": "object"
        },
        "endField": {
          "type": "string"
        },
        "field": {
          "description": "A filter is applied based on the values of the specified data field",
          "type": "string"
        },
        "fields": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "items": {
                "additionalProperties": false,
                "properties": {
                  "chrField": {
                    "type": "string"
                  },
                  "field": {
                    "type": "string"
                  },
                  "newField": {
                    "type": "string"
                  },
                  "type": {
                    "$ref": "#/definitions/FieldType"
                  }
                },
                "required": [
                  "field",
                  "type",
                  "newField",
                  "chrField"
                ],
                "type": "object"
              },
              "type": "array"
            }
          ]
        },
        "firstBp": {
          "additionalProperties": false,
          "description": "Based on the BEDPE, infer SV types. SV types are specified as one of the following strings: DUP, TRA, DEL, t2tINV, h2hINV.",
          "properties": {
            "chrField": {
              "type": "string"
            },
            "posField": {
              "type": "string"
            },
            "strandField": {
              "type": "string"
            }
          },
          "required": [
            "chrField",
            "posField",
            "strandField"
          ],
          "type": "object"
        },
        "flag": {
          "additionalProperties": false,
          "properties": {
            "field": {
              "type": "string"
            },
            "value": {
              "type": [
                "number",
                "string"
              ]
            }
          },
          "required": [
            "field",
            "value"
          ],
          "type": "object"
        },
        "genomicField": {
          "description": "Relative genomic position to parse.",
          "type": "string"
        },
        "genomicLengthField": {
          "description": "Length of genomic interval.",
          "type": "string"
        },
        "groupField": {
          "description": "The name of a nominal field to group rows by in prior to piling-up",
          "type": "string"
        },
        "inRange": {
          "description": "Check whether the value is in a number range.",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "include": {
          "description": "Check whether the value includes a substring.",
          "type": "string"
        },
        "maxRows": {
          "description": "Specify maximum rows to be generated (default has no limit).",
          "type": "number"
        },
        "method": {
          "$ref": "#/definitions/DisplacementType",
          "description": "A string that specifies the type of displacement."
        },
        "newField": {
          "type": "string"
        },
        "not": {
          "description": "when `{\"not\": true}`, apply a NOT logical operation to the filter.\n\n__Default:__ `false`",
          "type": "boolean"
        },
        "oneOf": {
          "description": "Check whether the value is an element in the provided list.",
          "items": {
            "type": [
              "string",
              "number",
              "null"
            ]
          },
          "type": "array"
        },
        "replace": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "from": {
                "type": "string"
              },
              "to": {
                "type": "string"
              }
            },
            "required": [
              "from",
              "to"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "secondBp": {
          "additionalProperties": false,
          "description": "Based on the BEDPE, infer SV types. SV types are specified as one of the following strings: DUP, TRA, DEL, t2tINV, h2hINV.",
          "properties": {
            "chrField": {
              "type": "string"
            },
            "posField": {
              "type": "string"
            },
            "strandField": {
              "type": "string"
            }
          },
          "required": [
            "chrField",
            "posField",
            "strandField"
          ],
          "type": "object"
        },
        "separator": {
          "type": "string"
        },
        "startField": {
          "type": "string"
        },
        "type": {
          "enum": [
            "filter",
            "concat",
            "replace",
            "log",
            "displace",
            "exonSplit",
            "genomicLength",
            "svType",
            "coverage",
            "subjson"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Displacement": {
      "additionalProperties": false,
      "properties": {
        "padding": {
          "type": "number"
        },
        "type": {
          "$ref": "#/definitions/DisplacementType"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "DisplacementType": {
      "enum": [
        "pile",
        "spread"
      ],
      "type": "string"
    },
    "DomainChr": {
      "additionalProperties": false,
      "properties": {
        "chromosome": {
          "type": "string"
        }
      },
      "required": [
        "chromosome"
      ],
      "type": "object"
    },
    "DomainChrInterval": {
      "additionalProperties": false,
      "properties": {
        "chromosome": {
          "description": "If specified, only showing a certain interval in a chromosome.",
          "type": "string"
        },
        "interval": {
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        }
      },
      "required": [
        "chromosome",
        "interval"
      ],
      "type": "object"
    },
    "DomainInterval": {
      "additionalProperties": false,
      "properties": {
        "interval": {
          "description": "Show a certain interval within entire chromosome",
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        }
      },
      "required": [
        "interval"
      ],
      "type": "object"
    },
    "EventStyle": {
      "additionalProperties": false,
      "description": "The styles defined here will be applied to the target marks of mouse events, such as a point mark after the user clicks on it.",
      "properties": {
        "arrange": {
          "description": "Show event effects behind or in front of marks.",
          "enum": [
            "behind",
            "front"
          ],
          "type": "string"
        },
        "color": {
          "description": "color of the marks when mouse events are triggered",
          "type": "string"
        },
        "opacity": {
          "description": "opacity of the marks when mouse events are triggered",
          "type": "number"
        },
        "stroke": {
          "description": "stroke color of the marks when mouse events are triggered",
          "type": "string"
        },
        "strokeOpacity": {
          "type": "number"
        },
        "strokeWidth": {
          "description": "stroke width of the marks when mouse events are triggered",
          "type": "number"
        }
      },
      "type": "object"
    },
    "FieldType": {
      "enum": [
        "genomic",
        "nominal",
        "quantitative"
      ],
      "type": "string"
    },
    "GenomicDomain": {
      "anyOf": [
        {
          "$ref": "#/definitions/DomainInterval"
        },
        {
          "$ref": "#/definitions/DomainChrInterval"
        },
        {
          "$ref": "#/definitions/DomainChr"
        }
      ]
    },
    "LogBase": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "const": "e",
          "type": "string"
        }
      ]
    },
    "LogicalOperation": {
      "enum": [
        "less-than",
        "lt",
        "LT",
        "greater-than",
        "gt",
        "GT",
        "less-than-or-equal-to",
        "ltet",
        "LTET",
        "greater-than-or-equal-to",
        "gtet",
        "GTET"
      ],
      "type": "string"
    },
    "Mark": {
      "enum": [
        "point",
        "line",
        "area",
        "bar",
        "rect",
        "text",
        "withinLink",
        "betweenLink",
        "rule",
        "triangleLeft",
        "triangleRight",
        "triangleBottom",
        "brush",
        "_header"
      ],
      "type": "string"
    },
    "Orientation": {
      "enum": [
        "horizontal",
        "vertical"
      ],
      "type": "string"
    },
    "PredefinedColors": {
      "enum": [
        "viridis",
        "grey",
        "spectral",
        "warm",
        "cividis",
        "bupu",
        "rdbu",
        "hot",
        "pink"
      ],
      "type": "string"
    },
    "Range": {
      "anyOf": [
        {
          "$ref": "#/definitions/ValueExtent"
        },
        {
          "$ref": "#/definitions/PredefinedColors"
        }
      ]
    },
    "SizeVisibilityCondition": {
      "additionalProperties": false,
      "properties": {
        "conditionPadding": {
          "description": "Specify the buffer size (in pixel) of width or height when calculating the visibility.\n\n__Default__: `0`",
          "type": "number"
        },
        "measure": {
          "description": "Specify which aspect of the `target` will be compared to the `threshold`.",
          "enum": [
            "width",
            "height"
          ],
          "type": "string"
        },
        "operation": {
          "$ref": "#/definitions/LogicalOperation",
          "description": "A string that specifies the logical operation to conduct between `threshold` and the `measure` of `target`. Support\n\n- greater than : \"greater-than\", \"gt\", \"GT\"\n\n- less than : \"less-than\", \"lt\", \"LT\"\n\n- greater than or equal to : \"greater-than-or-equal-to\", \"gtet\", \"GTET\"\n\n- less than or equal to : \"less-than-or-equal-to\", \"ltet\", \"LTET\""
        },
        "target": {
          "description": "Target specifies the object that you want to compare with the threshold.",
          "enum": [
            "track",
            "mark"
          ],
          "type": "string"
        },
        "threshold": {
          "anyOf": [
            {
              "type": "number"
            },
            {
              "const": "|xe-x|",
              "type": "string"
            }
          ],
          "description": "Specify the threshold as one of:\n\n- A number representing a fixed threshold in the unit of pixels;\n\n- `\"|xe-x|\"`, using the distance between `xe` and `x` as threshold"
        },
        "transitionPadding": {
          "description": "Specify the buffer size (in pixel) of width or height for smooth transition.\n\n__Default__: `0`",
          "type": "number"
        }
      },
      "required": [
        "measure",
        "operation",
        "target",
        "threshold"
      ],
      "type": "object"
    },
    "Style": {
      "additionalProperties": false,
      "properties": {
        "align": {
          "description": "Specify the alignment of marks. This property is currently only supported for `triangle` marks.",
          "enum": [
            "left",
            "right"
          ],
          "type": "string"
        },
        "background": {
          "type": "string"
        },
        "backgroundOpacity": {
          "type": "number"
        },
        "brush": {
          "additionalProperties": false,
          "description": "Customize the style of the brush mark in the `rangeSelect` mouse event.",
          "properties": {
            "color": {
              "description": "color of the marks when mouse events are triggered",
              "type": "string"
            },
            "opacity": {
              "description": "opacity of the marks when mouse events are triggered",
              "type": "number"
            },
            "stroke": {
              "description": "stroke color of the marks when mouse events are triggered",
              "type": "string"
            },
            "strokeOpacity": {
              "type": "number"
            },
            "strokeWidth": {
              "description": "stroke width of the marks when mouse events are triggered",
              "type": "number"
            }
          },
          "type": "object"
        },
        "curve": {
          "description": "Specify the curve of `rule` marks.",
          "enum": [
            "top",
            "bottom",
            "left",
            "right"
          ],
          "type": "string"
        },
        "dashed": {
          "description": "Specify the pattern of dashes and gaps for `rule` marks.",
          "items": {
            "type": "number"
          },
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "dx": {
          "description": "Offset the position of marks in x direction. This property is currently only supported for `text` marks",
          "type": "number"
        },
        "dy": {
          "description": "Offset the position of marks in y direction. This property is currently only supported for `text` marks.",
          "type": "number"
        },
        "enableSmoothPath": {
          "description": "Whether to enable smooth paths when drawing curves.\n\n__Default__: `false`",
          "type": "boolean"
        },
        "inlineLegend": {
          "description": "Specify whether to show legend in a single horizontal line?",
          "type": "boolean"
        },
        "legendTitle": {
          "description": "If defined, show legend title on the top or left",
          "type": "string"
        },
        "linePattern": {
          "additionalProperties": false,
          "description": "Specify the pattern of dashes and gaps for `rule` marks.",
          "properties": {
            "size": {
              "type": "number"
            },
            "type": {
              "enum": [
                "triangleLeft",
                "triangleRight"
              ],
              "type": "string"
            }
          },
          "required": [
            "type",
            "size"
          ],
          "type": "object"
        },
        "linkConnectionType": {
          "description": "Specify the connetion type of `betweenLink` marks.\n\n__Default__: `\"corner\"`",
          "enum": [
            "straight",
            "curve",
            "corner"
          ],
          "type": "string"
        },
        "linkMinHeight": {
          "description": "The minimum height of `withinLink` and `betweenLink` marks. Unit is a percentagle. __Default__: `0.5`",
          "type": "number"
        },
        "linkStyle": {
          "description": "The style of `withinLink` and `betweenLink` marks. __Default__: `'circular'` `'elliptical'` will be used as a default option.",
          "enum": [
            "elliptical",
            "circular",
            "straight"
          ],
          "type": "string"
        },
        "matrixExtent": {
          "description": "Determine to show only one side of the diagonal in a HiGlass matrix. __Default__: `\"full\"`",
          "enum": [
            "full",
            "upper-right",
            "lower-left"
          ],
          "type": "string"
        },
        "mouseOver": {
          "$ref": "#/definitions/EventStyle",
          "description": "Customize visual effects of `mouseOver` events on marks."
        },
        "outline": {
          "type": "string"
        },
        "outlineWidth": {
          "type": "number"
        },
        "select": {
          "$ref": "#/definitions/EventStyle",
          "description": "Customize visual effects of `rangeSelect` events on marks ."
        },
        "textAnchor": {
          "description": "Specify the alignment of `text` marks to a given point.",
          "enum": [
            "start",
            "middle",
            "end"
          ],
          "type": "string"
        },
        "textFontSize": {
          "description": "Specify the font size of `text` marks. Can also be specified using the `size` channel option of `text` marks.",
          "type": "number"
        },
        "textFontWeight": {
          "description": "Specify the font weight of `text` marks.",
          "enum": [
            "bold",
            "normal"
          ],
          "type": "string"
        },
        "textStroke": {
          "description": "Specify the stroke of `text` marks. Can also be specified using the `stroke` channel option of `text` marks.",
          "type": "string"
        },
        "textStrokeWidth": {
          "description": "Specify the stroke width of `text` marks. Can also be specified using the `strokeWidth` channel option of `text` marks.",
          "type": "number"
        },
        "withinLinkVerticalLines": {
          "description": "Whether to show vertical lines that connect to the baseline (axis) when `y` and `ye` are both used. __Default__: `false`",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TemplateTrackDef": {
      "additionalProperties": false,
      "description": "Definition of Track Templates.",
      "properties": {
        "channels": {
          "items": {
            "$ref": "#/definitions/CustomChannelDef"
          },
          "type": "array"
        },
        "mapping": {
          "items": {
            "$ref": "#/definitions/TemplateTrackMappingDef"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "channels",
        "mapping"
      ],
      "type": "object"
    },
    "TemplateTrackMappingDef": {
      "additionalProperties": false,
      "description": "This is based on `SingleTrack` but the differences are only the type of channels which additionally have `base` properties to override properties from a template spec and remove of certain properties (e.g., `data`)",
      "properties": {
        "_assignedHeight": {
          "type": "number"
        },
        "_assignedWidth": {
          "description": "Internal: Used for responsive spec",
          "type": "number"
        },
        "_invalidTrack": {
          "description": "internal",
          "type": "boolean"
        },
        "_renderingId": {
          "description": "internal",
          "type": "string"
        },
        "assembly": {
          "$ref": "#/definitions/Assembly",
          "description": "A string that specifies the genome builds to use. Currently support `\"hg38\"`, `\"hg19\"`, `\"hg18\"`, `\"hg17\"`, `\"hg16\"`, `\"mm10\"`, `\"mm9\"`, and `\"unknown\"`.\n\n__Note:__: with `\"unknown\"` assembly, genomic axes do not show chrN: in labels."
        },
        "centerRadius": {
          "description": "Proportion of the radius of the center white space.\n\n__Default:__ `0.3`",
          "type": "number"
        },
        "color": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "dataTransform": {
          "items": {
            "$ref": "#/definitions/DataTransformWithBase"
          },
          "type": "array"
        },
        "displacement": {
          "$ref": "#/definitions/Displacement"
        },
        "endAngle": {
          "description": "Specify the end angle (in the range of [0, 360]) of circular tracks (`{\"layout\": \"circular\"}`).",
          "type": "number"
        },
        "flipY": {
          "type": "boolean"
        },
        "id": {
          "description": "Assigned to `uid` in a HiGlass view config, used for API and caching.",
          "type": "string"
        },
        "innerRadius": {
          "description": "Specify the inner radius of tracks when (`{\"layout\": \"circular\"}`).",
          "type": "number"
        },
        "linkingId": {
          "description": "Specify an ID for [linking multiple views](http://gosling-lang.org/docs/user-interaction#linking-views)",
          "type": "string"
        },
        "mark": {
          "$ref": "#/definitions/Mark"
        },
        "opacity": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "orientation": {
          "$ref": "#/definitions/Orientation",
          "description": "Specify the orientation."
        },
        "outerRadius": {
          "description": "Specify the outer radius of tracks when `{\"layout\": \"circular\"}`.",
          "type": "number"
        },
        "overlayOnPreviousTrack": {
          "type": "boolean"
        },
        "overrideTemplate": {
          "type": "boolean"
        },
        "prerelease": {
          "additionalProperties": false,
          "description": "internal",
          "type": "object"
        },
        "row": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "size": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "spacing": {
          "description": "The size of the gap (1) between tracks, (2) between views, and (3) of the origin of circular tracks. The effect of this property depends on where on the spec you specify the `spacing`.\n\nIn a linear layout, this value is used in pixels, while in a circular layout, this value is used relative to the height of the tracks or views.",
          "type": "number"
        },
        "startAngle": {
          "description": "Specify the start angle (in the range of [0, 360]) of circular tracks (`{\"layout\": \"circular\"}`).",
          "type": "number"
        },
        "static": {
          "description": "Whether to disable [Zooming and Panning](http://gosling-lang.org/docs/user-interaction#zooming-and-panning), __Default:__ `false`.",
          "type": "boolean"
        },
        "stretch": {
          "type": "boolean"
        },
        "stroke": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "strokeWidth": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "style": {
          "$ref": "#/definitions/Style",
          "description": "Define the [style](http://gosling-lang.org/docs/visual-channel#style-related-properties) of multive views. Will be overwritten by the style of children elements (e.g., view, track)."
        },
        "text": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "tooltip": {
          "items": {
            "$ref": "#/definitions/Tooltip"
          },
          "type": "array"
        },
        "visibility": {
          "items": {
            "$ref": "#/definitions/VisibilityCondition"
          },
          "type": "array"
        },
        "x": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "x1": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "x1e": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "xAxis": {
          "$ref": "#/definitions/AxisPosition",
          "description": "not supported"
        },
        "xDomain": {
          "anyOf": [
            {
              "$ref": "#/definitions/DomainInterval"
            },
            {
              "$ref": "#/definitions/DomainChrInterval"
            },
            {
              "$ref": "#/definitions/DomainChr"
            }
          ],
          "description": "Specify the visible region of genomic x-axis"
        },
        "xOffset": {
          "description": "Specify the x offset of views in the unit of pixels",
          "type": "number"
        },
        "xe": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "y": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "y1": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "y1e": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "yDomain": {
          "anyOf": [
            {
              "$ref": "#/definitions/DomainInterval"
            },
            {
              "$ref": "#/definitions/DomainChrInterval"
            },
            {
              "$ref": "#/definitions/DomainChr"
            }
          ],
          "description": "Specify the visible region of genomic y-axis"
        },
        "yOffset": {
          "description": "Specify the y offset of views in the unit of pixels",
          "type": "number"
        },
        "ye": {
          "$ref": "#/definitions/ChannelWithBase"
        },
        "zoomLimits": {
          "$ref": "#/definitions/ZoomLimits"
        }
      },
      "required": [
        "mark"
      ],
      "type": "object"
    },
    "Tooltip": {
      "additionalProperties": false,
      "properties": {
        "alt": {
          "description": "Name of the data field for showing in the tooltip. Will use the field name if not specified.",
          "type": "string"
        },
        "field": {
          "description": "Specifiy a data field whose value will show in the tooltip.",
          "type": "string"
        },
        "format": {
          "description": "format of the data value.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FieldType",
          "description": "Type of the data field."
        }
      },
      "required": [
        "field",
        "type"
      ],
      "type": "object"
    },
    "ValueExtent": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      ]
    },
    "VisibilityCondition": {
      "anyOf": [
        {
          "$ref": "#/definitions/SizeVisibilityCondition"
        },
        {
          "$ref": "#/definitions/ZoomLevelVisibilityCondition"
        }
      ]
    },
    "ZoomLevelVisibilityCondition": {
      "additionalProperties": false,
      "properties": {
        "conditionPadding": {
          "description": "Specify the buffer size (in pixel) of width or height when calculating the visibility.\n\n__Default__: `0`",
          "type": "number"
        },
        "measure": {
          "const": "zoomLevel",
          "description": "Specify which aspect of the `target` will be compared to the `threshold`.",
          "type": "string"
        },
        "operation": {
          "$ref": "#/definitions/LogicalOperation",
          "description": "A string that specifies the logical operation to conduct between `threshold` and the `measure` of `target`. Support\n\n- greater than : \"greater-than\", \"gt\", \"GT\"\n\n- less than : \"less-than\", \"lt\", \"LT\"\n\n- greater than or equal to : \"greater-than-or-equal-to\", \"gtet\", \"GTET\"\n\n- less than or equal to : \"less-than-or-equal-to\", \"ltet\", \"LTET\""
        },
        "target": {
          "description": "Target specifies the object that you want to compare with the threshold.",
          "enum": [
            "track",
            "mark"
          ],
          "type": "string"
        },
        "threshold": {
          "description": "Set a threshold in the unit of base pairs (bp)",
          "type": "number"
        },
        "transitionPadding": {
          "description": "Specify the buffer size (in pixel) of width or height for smooth transition.\n\n__Default__: `0`",
          "type": "number"
        }
      },
      "required": [
        "measure",
        "operation",
        "target",
        "threshold"
      ],
      "type": "object"
    },
    "ZoomLimits": {
      "items": {
        "type": [
          "number",
          "null"
        ]
      },
      "maxItems": 2,
      "minItems": 2,
      "type": "array"
    }
  }
}
